apply plugin: 'application'

// CHANGED: added jacoco plugin to produce test coverage report (for CI)
apply plugin: 'jacoco'

java.sourceCompatibility = 17
java.targetCompatibility = 17
if (JavaVersion.current().isJava9Compatible()) {
  compileJava.options.release.set(17)
}

/*
 * CHANGED: for the asset tests, we need to add assets as a source
 * directory during testing, similarly to the lwjgl3 project.
 */
sourceSets.test.resources.srcDirs += [ rootProject.file('assets').path ]

mainClassName = 'CampusTycoon.headless.HeadlessLauncher'
application.setMainClass(mainClassName)
eclipse.project.name = appName + '-headless'

dependencies {
  implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation project(':core')

  // CHANGED: add JUnit 5 and Mockito to the dependencies
  testImplementation platform('org.junit:junit-bom:5.10.0')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.mockito:mockito-core:5.11.0'
  testImplementation 'com.badlogicgames.gdx:gdx-backend-headless:1.13.1'
}

jar {
  archiveBaseName.set(appName)
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
tasks.register('dist') {
  dependsOn 'jar'
}

// CHANGED: need to tell Gradle about our use of JUnit and have JaCoCo look at core sources
jacocoTestReport {
  sourceSets project(':core').sourceSets.main
}

test {
  useJUnitPlatform()
}
